@page "/mealrecipe/{Index:int}"
@using AiChef.Shared;
@using System.Text.Json;
@using System.Web;
@inject HttpClient Http;
@inject NavigationManager Navigation; 
@inject IJSRuntime Js;

@if(isLoaded){
<div class="container mt-5 h-100">
    <div class="d-flex flex-column flex-lg-row justify-content-start">
        <div class="text-center text-lg-start">
                <img src="@recipeImageURL" class="rounded-3 recipeImage" />
        </div>
        <div class="flex-grow-1 px-3">
            <h1 class="fw-bold">@recipe.Title</h1>
            <p>@recipe.Summary</p>
            <div class="text-end">
                <button class="btn btn-success d-print-none" @onclick="Print">Print</button>
            </div>
        </div>
    </div>
    <div class="row row-cols-1 row-cols-md-2">
        <div class="col mt-3">
            <h2>Ingredients</h2>
            <ul>
                 @foreach (var item in recipe.Ingredients)
                 {
                    <li>@item</li>    
                 }
            </ul>
        </div>
        <div class="col mt-3">
            <h2>Instructions</h2>
            <ul>
                @foreach (var item in recipe.Instructions)
                {
                  <li>@item</li>
                }
            </ul>
        </div>
    </div>
</div>
}
else{
    <ChefSpinner>
    </ChefSpinner>
}



@code {
    [CascadingParameter]
    private RecipeState? recipeState{ get; set; }
    private Recipe recipe = new();
    private readonly JsonSerializerOptions _jsonOptions = new()
    {
        PropertyNameCaseInsensitive = true,
        PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
        DefaultIgnoreCondition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull
    };

    [Parameter]
    public int Index { get; set; }

    private string title;

    private string recipeImageURL = string.Empty;

    bool isLoaded = false;

    protected override void OnInitialized()
    {
        GetRecipe();
    }
    private async void GetRecipe()
    {
        string baseuri = "Recipe/GetRecipe";

        try
        {
            title = recipeState.Ideas.FirstOrDefault(i => i.Index == Index).Title;

            RecipeParms recipeParms = new RecipeParms()
            {
               MealTime = recipeState.MealTime,
               Ingredients = recipeState.Ingredients,
               SelectedIdea = title
            };

            //get recipe image
            HttpResponseMessage responseImage = await Http.GetAsync($"Recipe/GetRecipeImage?title={HttpUtility.UrlEncode(title)}");
            var recipeImage = await responseImage.Content.ReadFromJsonAsync<RecipeImage>();
            recipeImageURL = recipeImage!.Data[0].Url;

            //get recipe
            HttpResponseMessage responseRecipe = await Http.PostAsJsonAsync(baseuri, recipeParms, _jsonOptions);
            responseRecipe.EnsureSuccessStatusCode();

            recipe = (await responseRecipe.Content.ReadFromJsonAsync<Recipe>())!;

            isLoaded = true;

            StateHasChanged();

        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: could not generate recipe!");
        }
    }
    private async Task Print()
    {
        await Js.InvokeVoidAsync("printInvoke");
    }

}
